{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Easier integrations with Faraday Agents","text":"<p>Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them.</p> <p>In Faraday\u2019s case, we are aware that integrations with other security tools are a critical part of our product. However, we\u2019ve realized that our  Plugin system wasn't as easy as we expected to develop some  integrations: it required some level of interactivity (either running a  command from the console or importing a report), so it was hard to use on a  periodic basis. It also forced integration developers to use our Python API,  even when the tool to integrate with wasn't programmed in Python, making it  harder for the developer.</p> <p>To solve this problem, we have the Faraday Agents! You can use the getting started guide to use one of our official executors, or code  and use one custom executor. Otherwise, you can use our docker image with some tools already built and ready to  go!</p> <p>You can also check our architecture or  technical section, to understand how the agents works.</p>"},{"location":"418/","title":"418 - I'm a teapot","text":"<p>This documentation is being build incrementally, so the page you were   referenced, has not been done... yet</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#install","title":"Install","text":"pip <pre><code>$ pip install faraday_agent_dispatcher\n</code></pre> git <pre><code>$ git clone https://github.com/infobyte/faraday_agent_dispatcher.git\n$ cd faraday_agent_dispatcher\n$ pip install .\n</code></pre>"},{"location":"getting-started/#configure-your-agent","title":"Configure your agent","text":"<p>The dispatcher can be configured with the <code>wizard</code> command: </p> <pre><code>$ faraday-dispatcher config-wizard\n</code></pre> <p>The wizard will ask for which configuration you would set, the  agent configuration or the  executors configuration.</p>"},{"location":"getting-started/#agent-configuration","title":"Agent configuration","text":"<p>The proper configuration differ if you want to use SSL connection with your  Faraday server. When using SSL you can use a self-signed certificate!</p> <p>Examples:</p> https <p>Example</p> <p>$ faraday-dispatcher config-wizard Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit?  (A, E, Q) [Q]: A Section: server host [127.0.0.1]: ssl [Y/n]: api_port [443]: websocket_port [443]: ssl_ignore [y/N]: N Section: agent agent_name [agent]: sslAgent Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit?  (A, E, Q) [Q]: Q </p> http <p>Example</p> <p>$ faraday-dispatcher config-wizard Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit?  (A, E, Q) [Q]: A Section: server host [127.0.0.1]: ssl [True]: False api_port [5985]: websocket_port [9000]: Section: agent agent_name [agent]: sslFalseAgent Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit? (A, E, Q) [Q]: Q </p> <p>Warning</p> <p>We stronglly recommend to use <code>https</code> if not using within localhost</p>"},{"location":"getting-started/#executors-configuration","title":"Executors configuration","text":"<p>When adding an executor you can set an executor with minimum configuration,  which ones we maintain, call as official executor; or your own custom  executors.</p> <p>In the next examples, you can see how to add a nessus executor, both as an official and custom executor:</p> Official Example <p>$ faraday-dispatcher config-wizard Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit? (A, E, Q) [Q]: E The actual configured executors are: [] Do you want to [A]dd, [M]odify or [D]elete an executor? Do you want to [Q]uit? (A, M, D, Q) [Q]: A Name: official Is a custom executor? [y/N]: N The executors are: 1: arachni 2: burp 3: crackmapexec 4: gvm_openvas 5: insightvm 6: nessus 7: nikto2 8: nmap 9: nuclei 10: openvas_legacy +: Next page Q: Don't choose Choose one: 6 Environment variable NESSUS_USERNAME value: username Environment variable NESSUS_PASSWORD value: password Environment variable NESSUS_URL value: https://nessus_url.com New repository executor added The actual configured executors are: ['official'] Do you want to [A]dd, [M]odify or [D]elete an executor? Do you want to [Q]uit? (A, M, D, Q) [Q]: Q Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit? (A, E, Q) [Q]: Q </p> Custom Example <p>$ faraday-dispatcher config-wizard Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit? (A, E, Q) [Q]: E The actual configured executors are: [] Do you want to [A]dd, [M]odify or [D]elete an executor? Do you want to [Q]uit? (A, M, D, Q) [Q]: A Name: custom Is a custom executor? [y/N]: Y Command to execute [exit 1]: python3 {REPO_FOLDER}/faraday_agent_dispatcher/static/executors/official/nessus.py The actual custom executor's environment variables are: [] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you  want to [Q]uit? (A, M, D, Q) [Q]: A Environment variable name: NESSUS_USERNAME Environment variable value: username The actual custom executor's environment variables are: ['nessus_username'] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you  want to [Q]uit? (A, M, D, Q) [Q]: A Environment variable name: NESSUS_PASSWORD Environment variable value: password The actual custom executor's environment variables are: ['nessus_username',  'nessus_password'] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you  want to [Q]uit? (A, M, D, Q) [Q]: A Environment variable name: NESSUS_URL Environment variable value: https://nessus_url.com The actual custom executor's environment variables are: ['nessus_username',  'nessus_password', 'nessus_url'] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you  want to [Q]uit? (A, M, D, Q) [Q]: Q The actual custom executor's arguments are: [] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to  [Q]uit? (A, M, D, Q) [Q]: A Argument name: NESSUS_SCAN_NAME Is mandatory? [y,N]: N The actual custom executor's arguments are: ['nessus_scan_name'] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to  [Q]uit? (A, M, D, Q) [Q]: A Argument name: NESSUS_URL Is mandatory? [y,N]: N The actual custom executor's arguments are: ['nessus_scan_name',  'nessus_url'] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to  [Q]uit? (A, M, D, Q) [Q]: A Argument name: NESSUS_SCAN_TARGET Is mandatory? [y,N]: Y The actual custom executor's arguments are: ['nessus_scan_name', 'nessus_url', 'nessus_scan_target'] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to  [Q]uit? (A, M, D, Q) [Q]: A Argument name: NESSUS_SCAN_TEMPLATE Is mandatory? [y,N]: N The actual custom executor's arguments are: ['nessus_scan_name', 'nessus_url', 'nessus_scan_target', 'nessus_scan_template'] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to  [Q]uit? (A, M, D, Q) [Q]: Q The actual configured executors are: ['custom'] Do you want to [A]dd, [M]odify or [D]elete an executor? Do you want to  [Q]uit? (A, M, D, Q) [Q]: Q Do you want to edit the [A]gent or the [E]xecutors? Do you want to [Q]uit?  (A, E, Q) [Q]: Q </p> <p>Warning</p> <p>Compared to the official executor example, this is more complex and ask for both arguments and configuration environment variables. We strongly recommend to read the custom executors technical section</p> <p>If you want to know how the executors work, you can check their technical section.</p>"},{"location":"getting-started/#running-the-agent","title":"Running the agent","text":""},{"location":"getting-started/#start-the-agent","title":"Start the agent","text":"<p>The first time you run an agent, you need a token provided by the server That required token can be taken from the http(s)://{faraday_server_host}/#/admin/agents</p> <p>For example in:</p> <p></p> <p>Your token is: 225230</p> <p>The dispatcher can be executed with the <code>run</code> command, passing this token as an option: </p> <pre><code>$ faraday-dispatcher run --token={TOKEN}\n</code></pre> Expected output <p>The expected output when the dispatcher run command is as follows <pre><code>$ faraday-dispatcher run\nINFO - token_registration_url: {faraday_host}/_api/v3/ws/agent2/agent_registration\nINFO - Registered successfully\nINFO - Connection to Faraday server succeeded\n</code></pre></p> Warning <p>The token is only needed the first time you run an agent, afterward you can run it without the option, as: <pre><code>$ faraday-dispatcher run\n</code></pre></p>"},{"location":"getting-started/#running-an-executor-from-faraday","title":"Running an executor from faraday","text":"<ol> <li>Go to https://{faraday_server_host}/automation/agents    </li> <li>Click the green play bottom in the agent</li> <li>Select the executor, fill the arguments    </li> <li>Click <code>Run</code></li> </ol> Expected output <p>```shell INFO - Parsing data: {\"execution_ids\": [XX], \"agent_id\": XX, \"workspaces\": [{WORKSPACE_NAME}], \"action\": \"RUN\",</p> <p>\"executor\": \"nmapOfficial\", \"args\": {EXECUTOR_ARGS}, \"plugin_args\": {\"ignore_info\": true, \"resolve_hotname\": true}}     INFO - Running {EXECUTOR_NAME} executor     [Executor data]     INFO - Executor {EXECUTOR_NAME} finished successfully     ```</p> Error output <p>```shell INFO - Parsing data: {\"execution_ids\": [XX], \"agent_id\": XX, \"workspaces\": [{WORKSPACE_NAME}], \"action\": \"RUN\",</p> <p>\"executor\": \"nmapOfficial\", \"args\": {EXECUTOR_ARGS}, \"plugin_args\": {\"ignore_info\": true, \"resolve_hotname\": true}}     INFO - Running {EXECUTOR_NAME} executor     [Executor data and errors]     WARNING - Executor {EXECUTOR_NAME} finished with exit code 1     ```</p>"},{"location":"misc/appscan/","title":"Faraday\u2019s Appscan Executor","text":"<p>The function of the Appscan Executor is to create and/or launch an Appscan scan.</p>"},{"location":"misc/appscan/#environment-variables","title":"Environment Variables","text":"<p>The Appscan executor has 3 environment variables: HCL_KEY_ID, HCL_KEY_SECRET and HCL_APP_ID.  HCL_KEY_ID and HCL_KEY_SECRET are used to create the token to authenticate against Appscan.</p> <p>HCL_APP_ID is used to indicate in which app launch the scanner</p>"},{"location":"misc/appscan/#parameters","title":"Parameters:","text":"<p>The Appscan executor has 1 mandatory parameters: - Scan Type: can be SAST or DAST.</p> <p>When creating a new scan the parameter HCL_SCAN_TARGET is required. If the target is not already register in Appscan the executor will not work.  Also you can pass a scan name, if none are passed the scan will be named timestamp-faraday-agent.</p> <p>The executor can also execute a scan already created, in that case the parameter HCL_SCAN_ID is required.</p>"},{"location":"misc/docker/","title":"Agent Docker image","text":""},{"location":"misc/docker/#usage","title":"Usage","text":"<p>The image is already published in our dockehub page, so you just  have to pull our image with the following command</p> <pre><code>$ docker pull faradaysec/faraday_agent_dispatcher\n</code></pre> <p>After that you only need a .yaml file to pass to the image. We already have some  templates to use. For these you have to edit it in  the first lines:</p> <pre><code>server:\n  api_port: '5985' # TODO be replaced with network configuration\n  host: localhost\n  ssl: 'False'\n  ssl_cert: ''\n  websocket_port: '9000'\n</code></pre> <p>After setting the values in the .yaml file, you can run the agent as:</p> <pre><code>$ docker run -v {ABSOLUTE_PATH_TO_YAML}:/root/.faraday/config/dispatcher.yaml faradaysec/faraday_agent_dispatcher --token={TOKEN}\n</code></pre> Migrating from .ini <p>If you had an old version from agent-dispatcher, you can migrate your dispatcher.ini file as follows: <pre><code>docker run -v {ABSOLUTE_PATH_TO_INI}:/root/.faraday/config/dispatcher.ini -v {ABSOLUTE_PATH_TO_YAML}:/root/.faraday/config/dispatcher.yaml --entrypoint \"/usr/local/bin/faraday-dispatcher\" faradaysec/faraday_agent_dispatcher config-wizard\n</code></pre></p> <p>Warning</p> <p>As we explain in the getting started guide, you only need the token the first time you run an agent</p>"},{"location":"misc/docker/#templates","title":"Templates","text":"<p>We currently have 2 templates:</p> Base Agent <p>This template use is as simple as shown above <pre><code>$ docker run -v {ABSOLUTE_PATH_TO_INI}:/root/.faraday/config/dispatcher.ini -it faradaysec/faraday_agent_dispatcher --token={TOKEN}\n</code></pre></p> old .ini version <p>This template is the old .ini version of this template, it actually don't work with version 2.0.0</p> With reports <p>This template adds the possibility of use a path to read reports from the host machine. <pre><code>$ docker run -v {ABSOLUTE_PATH_TO_INI}:/root/.faraday/config/dispatcher.ini  -v {ABSOLUTE_PATH_TO_REPORT_FOLDER}:/root/reports/ -it faradaysec/faraday_agent_dispatcher --token={TOKEN}\n</code></pre> Then you can process any report by just specifying the route to the report file as an executor parameter</p> old .ini version <p>This template is the old .ini version of this template, it actually don't work with version 2.0.0</p>"},{"location":"misc/qualys/","title":"Faraday\u2019s Qualys Executor","text":"<p>The function of the Qualys Executor is to launch a Qualys scan with certain scan profile to a website.</p>"},{"location":"misc/qualys/#environment-variables","title":"Environment Variables","text":"<p>The Qualys executor has 2 environment variables: QUALYS_USERNAME and QUALYS_PASSWORD, which are the same ones used to access the Qualys web site.</p>"},{"location":"misc/qualys/#parameters","title":"Parameters:","text":"<p>The Qualys executor has 2 mandatory parameters: - Target Ip  which is the ip of the site you want to scan. The executor will create the target ip in Qualys in case it is not already created. - Option Profile which is the ip of the profile scan you want to use. The Option Profile must already be created to perform the scan. In case of using an incorrect number, the executor will display an error message and show the current profiles available in the dispatcher logs.</p> <p>You can also use a Pull interval, this parameter will setup how often the Agent will check if the scan is already finished. If no value is used the default pull interval will be 180 seconds.</p>"},{"location":"misc/qualys/#create-a-scan-profile-in-qualys","title":"Create a scan profile in Qualys:","text":"<p>To add a scan profile in the VMDR section go to Scans-&gt;Option Profiles-&gt;new-&gt;Option Profile</p> <p></p> <p>then a window will open, complete the information as you see fit.</p> <p>** To check the id of a Profile click in the title column click info in the drop menu.  </p> <p></p> <p>The id is the first parameter in the next image:</p> <p></p>"},{"location":"misc/sonarqube/","title":"Faraday\u2019s SonarQube Executor","text":"<p>The SonarQube executor function is to download and import the vulnerabilities detected by SonarQube.</p>"},{"location":"misc/sonarqube/#environment-variables","title":"Environment Variables","text":"<p>The SonarQube executor has 1 environment variable: SONAR_URL, which is the url of where your sonarcube server is hosted. (example: http://localhost:9000)</p>"},{"location":"misc/sonarqube/#parameters","title":"Parameters:","text":"<p>The SonarQube executor has 1 mandatory parameters: - Token:  which is the token generate by SonarQube</p> <p>You can use the Component key parameter to limit the export to vulnerabilities of that component.</p>"},{"location":"misc/sonarqube/#generate-a-token","title":"Generate a token","text":"<p>To generate a new token click in your profile picture then go to My Account</p> <p></p> <p>Then go to Security tab, write the name of the new token and select the type of token you want. If you select Project Analisys Token verify that the project select is correct.</p> <p></p> <p>Then click in generate and the token will be displayed.</p>"},{"location":"misc/tenableio/","title":"Tenable.io","text":"<p>The excecutor of tenable.io will launch a scan in your account of tenable.io. When the scan finish the executor will download the report and export it to faraday.</p>"},{"location":"misc/tenableio/#envioroment-variables","title":"Envioroment variables","text":"<p>TENABLE_ACCESS_KEY and TENABLE_SECRET_KEY can be generated in \"My Account\"-&gt;\"API KEYS\" in the tenable website.</p> <p>TENABLE_PULL_INTERVAL is the interval between each request after the scan started</p>"},{"location":"misc/tenableio/#parameters","title":"Parameters","text":"<p>TENABLE_SCAN_NAME: the name of the scan</p> <p>TENABLE_SCAN_ID: if you want to launch a scan that already exist you can pass its id</p> <p>TENABLE_SCANNER_NAME: if you want to run the scan with an scanner you can pass the scanner name:</p> <p>TENABLE_SCAN_TARGET: the scan target, can be an ip or hostname</p> <p>TENABLE_SCAN_TEMPLATE: if you want to use an specifict template</p>"},{"location":"technical/agents/","title":"Agents","text":"<p>Using Faraday to upload reports from tools is great. But when  automatizing a scan, it is not expected to write scripts mixing its Python API  configuration with the scan code. Moreover, if the scan code is in other  language and/or another host, there will be code mangling the http connection.</p> <p>On runtime, the Faraday Agent will be in charge of the connection, and be focus  on the code automatizing the scan.</p>"},{"location":"technical/agents/#executors","title":"Executors","text":"<p>The important code which the Agent can run resides in the Executors, it can  be in any language, and interact with any other resources. The only expected  behaviour is as it were part of a shell pipeline, meaning that its output  is expected to by:</p> <ul> <li>stdout: Only relevant data sent to Faraday, it must be in json format,  expected to be received by the Faraday API</li> <li>stderr: All kind of info not relevant to Faraday, such as information   and errors.</li> </ul> <p>End of file</p> <p>Both stdout and stderr are assumed closed by receiving double <code>\\n</code>.</p> <p>Some executors are parametrized by:</p> <ul> <li>Environment variables: These contains fixed or private configuration,  such as API Tokens, directory or file path, etc.</li> <li>Arguments: These parameters comes from Faraday, and can differ between   executions, such as IP range, a feature flag, etc. All parameters   goes by environment variables, prefixed as <code>EXECUTOR_CONFIG_{PARAM_NAME}</code>   to not conflict with actual environment variables. It is configurable if they   are mandatory or not.</li> </ul> <p>Also faraday server can send plugins arguments when you run an executer. These are: - AGENT_CONFIG_IGNORE_INFO: Bool, will ignore info level vulnerabilities. - AGENT_CONFIG_RESOLVE_HOSTNAME: Bool, will resolve the hostname if posible. - AGENT_CONFIG_VULN_TAG: List of strings, will add the tags to the vulns. - AGENT_CONFIG_SERVICE_TAG: List of strings, will add the tags to the services. - AGENT_CONFIG_HOSTNAME_TAG: List of strings, will add the tags to the hosts.</p> <p>Info</p> <p>All that configuration allows executor debugging being a lot more easier, not needing the Agent to be run, only with a shell command <pre><code>$ ./my_executor # This assume, as within the agent, that the enviroment is ready\n</code></pre></p>"},{"location":"technical/agents/#official-executors","title":"Official executors","text":"<p>The Faraday agent is shipped with some pre-configured executors. While  configuring the agent with the configuration wizard, it will already  know with are the environment variables and arguments. It will ask for the  variables values and will be ready to go. These executors are in  <code>faraday_agent_dispatcher/static/executors/official</code>, and all their  configuration is in its own manifest JSON file.</p>"},{"location":"technical/agents/#custom-executors","title":"Custom executors","text":"<p>When requiring a custom executor, its possible to configuring them with the  configuration wizard, and it will ask for which are the environment  variables and their value as for the parameters, and whether they are  mandatory or not.</p>"},{"location":"technical/agents/#dispatcher","title":"Dispatcher","text":"<p>The agent dispatcher is a middleware, between the executors, and the Faraday  server. It will handle the multiple processes and communication with them,  and with the server.</p>"},{"location":"technical/agents/#communication-with-faraday","title":"Communication with Faraday","text":"<p>When communicating with Faraday there are some things to be aware of:</p> <ul> <li>The agent initiates the communication, no matter if it is registering   itself as a new agent or just connecting in an restart process.</li> <li>The server has a collection of Agents to run executors, and has the   ability to say when to run them. A never ending executor, always   receive the first start command from the server.</li> <li>For now, the agent only post data to the server, when any executor says   it has new data.</li> </ul> <p>That being said, it is clearly separated between two different type of  connection between Agent and server:</p> <ul> <li>REST API: General data, such as registering a new agent and publishing   new data. Its always the agent interacting with the server.</li> <li>Websockets: Commands data, its a separated protocol for agents management.</li> </ul>"},{"location":"technical/agents/#rest-api","title":"REST API","text":"<p>Faraday has a vast REST API, and there are a few endpoints used by  the agent, which are used for:</p> <ul> <li><code>/_api/v3/info</code>: Connectivity check.</li> <li><code>/_api/v3/agents</code>: [POST] Registration of a new agent.</li> <li><code>/_api/v3/agent_websocket_token</code>: Get a websocket token.</li> <li><code>/_api/v3/ws/{workspace_name}/bulk_create</code>: Publish data to a specific   workspace</li> </ul> <p>REST API Documentarion</p> <p>For more info about the API, use its own documentation</p>"},{"location":"technical/agents/#websockets","title":"Websockets","text":"<p>For commands, a bidirectional communication is expected between the Agent  and the server. The server can only send a <code>RUN</code> command, specifying which  executor to run, its parameters, plugins arguments (ignore info, resolve_hostname) and to which workspaces post the data. It  also has some metadata relevant to the faraday server to identify the  execution.</p> <p>The agent is able to notify the server with three actions:</p> <ul> <li><code>JOIN_AGENT</code>: Notify the server it is ready to run, which executors are   available and their params.</li> <li><code>LEAVE_AGENT</code>: Notify of disconnection.</li> <li><code>RUN_STATUS</code>: After a <code>RUN</code> command, notify if something was wrong and   won't run, or if the executor run successfully or not.</li> </ul>"},{"location":"technical/agents/#communication-with-executors","title":"Communication with executors","text":"<p>As mentioned before, executors take parameters and environment  variables as input methods, and standard files as stderr and stdout as  output methods.</p>"},{"location":"technical/agents/#why-is-the-agent-asynchronous","title":"Why is the agent asynchronous?","text":"<p>There are some reasons for that:</p> <ol> <li>It is expected the dispatcher runs multiples executors at the same time,  and isn't waiting to be finished while midway data is ready to be sent.</li> <li>Moreover, the dispatcher is just a IO-bound middleware, waiting for  news from the server or the executors.</li> <li>Finally, the executors can be written in any language, that  means they can be in the same process.</li> </ol> <p>All these features can be accomplished by using Python asyncio  in the development of it. So, the dispatcher is a single-process with  single-threading. Its living coroutines basically are:</p> <ul> <li>A waiting coroutine for web-sockets commands.</li> <li>A launch executor coroutine.</li> <li>The listen a stderr and stdout from executor coroutines.</li> </ul> <p>Warning</p> <p>As its mentioned there are only 3 types of living coroutines, but are multiple running. The main coroutine is always running or waiting, and 3 more coroutines are running for each executor.</p>"},{"location":"technical/arch/","title":"Architecture","text":"<p>Faraday is a web application, the server is made with Python using  Flask. Its possible to automatize tool usage with Faraday agents.</p> <p></p>"},{"location":"technical/arch/#faraday-server","title":"Faraday server","text":"<p>Faraday is accessed by a Web Browser or the Faraday Client. Both clients, communicate with Faraday Server via its REST API.</p> <p>The server has other main components as the Report Processor, or the Websocket  Server. The latter provides information to the Client.</p>"},{"location":"technical/arch/#faraday-agent","title":"Faraday agent","text":"<p>The agent is an application composed by scripts discovering information,  called executors. They can access any external services or use the  Faraday's Report Processor.</p> <p>The data found by them is sent to the Faraday server by a middleware called  Dispatcher, which will be the only module communicating with the server.  Moreover, the Dispatcher is in charge of the scheduling of executors, backed  by its implementation with asyncio.</p> <p>The Dispatcher uses the Faraday API to first communication and  publishing the data, specially the bulk_create endpoint. In  addition, the only communication via the websocket server are the commands  from faraday, such as which executor will run and its arguments values,  execution status updates, etc. The executors communicates by the standard  output the data to publish, and by the standard error any information about  the run.</p>"}]}